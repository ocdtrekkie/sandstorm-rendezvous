// Code generated by capnpc-go. DO NOT EDIT.

package main

import (
	context "context"
	ip "zenhack.net/go/sandstorm/capnp/ip"
	util "zenhack.net/go/sandstorm/capnp/util"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type PortInfo struct{ capnp.Struct }

// PortInfo_TypeID is the unique identifier for the type PortInfo.
const PortInfo_TypeID = 0xf6ed63ae8f9d7bbb

func NewPortInfo(s *capnp.Segment) (PortInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PortInfo{st}, err
}

func NewRootPortInfo(s *capnp.Segment) (PortInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PortInfo{st}, err
}

func ReadRootPortInfo(msg *capnp.Message) (PortInfo, error) {
	root, err := msg.Root()
	return PortInfo{root.Struct()}, err
}

func (s PortInfo) String() string {
	str, _ := text.Marshal(0xf6ed63ae8f9d7bbb, s.Struct)
	return str
}

func (s PortInfo) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PortInfo) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PortInfo) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PortInfo) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// PortInfo_List is a list of PortInfo.
type PortInfo_List struct{ capnp.List }

// NewPortInfo creates a new list of PortInfo.
func NewPortInfo_List(s *capnp.Segment, sz int32) (PortInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PortInfo_List{l}, err
}

func (s PortInfo_List) At(i int) PortInfo { return PortInfo{s.List.Struct(i)} }

func (s PortInfo_List) Set(i int, v PortInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s PortInfo_List) String() string {
	str, _ := text.MarshalList(0xf6ed63ae8f9d7bbb, s.List)
	return str
}

// PortInfo_Future is a wrapper for a PortInfo promised by a client call.
type PortInfo_Future struct{ *capnp.Future }

func (p PortInfo_Future) Struct() (PortInfo, error) {
	s, err := p.Future.Struct()
	return PortInfo{s}, err
}

type LocalNetwork struct{ Client *capnp.Client }

// LocalNetwork_TypeID is the unique identifier for the type LocalNetwork.
const LocalNetwork_TypeID = 0xcf90c45832cf5d2b

func (c LocalNetwork) Bind(ctx context.Context, params func(LocalNetwork_bind_Params) error) (LocalNetwork_bind_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcf90c45832cf5d2b,
			MethodID:      0,
			InterfaceName: "proto.capnp:LocalNetwork",
			MethodName:    "bind",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LocalNetwork_bind_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LocalNetwork_bind_Results_Future{Future: ans.Future()}, release
}
func (c LocalNetwork) Resolve(ctx context.Context, params func(LocalNetwork_resolve_Params) error) (LocalNetwork_resolve_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcf90c45832cf5d2b,
			MethodID:      1,
			InterfaceName: "proto.capnp:LocalNetwork",
			MethodName:    "resolve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LocalNetwork_resolve_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LocalNetwork_resolve_Results_Future{Future: ans.Future()}, release
}

// A LocalNetwork_Server is a LocalNetwork with a local implementation.
type LocalNetwork_Server interface {
	Bind(context.Context, LocalNetwork_bind) error

	Resolve(context.Context, LocalNetwork_resolve) error
}

// LocalNetwork_NewServer creates a new Server from an implementation of LocalNetwork_Server.
func LocalNetwork_NewServer(s LocalNetwork_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(LocalNetwork_Methods(nil, s), s, c, policy)
}

// LocalNetwork_ServerToClient creates a new Client from an implementation of LocalNetwork_Server.
// The caller is responsible for calling Release on the returned Client.
func LocalNetwork_ServerToClient(s LocalNetwork_Server, policy *server.Policy) LocalNetwork {
	return LocalNetwork{Client: capnp.NewClient(LocalNetwork_NewServer(s, policy))}
}

// LocalNetwork_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func LocalNetwork_Methods(methods []server.Method, s LocalNetwork_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcf90c45832cf5d2b,
			MethodID:      0,
			InterfaceName: "proto.capnp:LocalNetwork",
			MethodName:    "bind",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Bind(ctx, LocalNetwork_bind{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcf90c45832cf5d2b,
			MethodID:      1,
			InterfaceName: "proto.capnp:LocalNetwork",
			MethodName:    "resolve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolve(ctx, LocalNetwork_resolve{call})
		},
	})

	return methods
}

// LocalNetwork_bind holds the state for a server call to LocalNetwork.bind.
// See server.Call for documentation.
type LocalNetwork_bind struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LocalNetwork_bind) Args() LocalNetwork_bind_Params {
	return LocalNetwork_bind_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LocalNetwork_bind) AllocResults() (LocalNetwork_bind_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_bind_Results{Struct: r}, err
}

// LocalNetwork_resolve holds the state for a server call to LocalNetwork.resolve.
// See server.Call for documentation.
type LocalNetwork_resolve struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LocalNetwork_resolve) Args() LocalNetwork_resolve_Params {
	return LocalNetwork_resolve_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LocalNetwork_resolve) AllocResults() (LocalNetwork_resolve_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_resolve_Results{Struct: r}, err
}

type LocalNetwork_bind_Params struct{ capnp.Struct }

// LocalNetwork_bind_Params_TypeID is the unique identifier for the type LocalNetwork_bind_Params.
const LocalNetwork_bind_Params_TypeID = 0xab6095ec0734f95a

func NewLocalNetwork_bind_Params(s *capnp.Segment) (LocalNetwork_bind_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalNetwork_bind_Params{st}, err
}

func NewRootLocalNetwork_bind_Params(s *capnp.Segment) (LocalNetwork_bind_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LocalNetwork_bind_Params{st}, err
}

func ReadRootLocalNetwork_bind_Params(msg *capnp.Message) (LocalNetwork_bind_Params, error) {
	root, err := msg.Root()
	return LocalNetwork_bind_Params{root.Struct()}, err
}

func (s LocalNetwork_bind_Params) String() string {
	str, _ := text.Marshal(0xab6095ec0734f95a, s.Struct)
	return str
}

func (s LocalNetwork_bind_Params) Info() (PortInfo, error) {
	p, err := s.Struct.Ptr(0)
	return PortInfo{Struct: p.Struct()}, err
}

func (s LocalNetwork_bind_Params) HasInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalNetwork_bind_Params) SetInfo(v PortInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated PortInfo struct, preferring placement in s's segment.
func (s LocalNetwork_bind_Params) NewInfo() (PortInfo, error) {
	ss, err := NewPortInfo(s.Struct.Segment())
	if err != nil {
		return PortInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LocalNetwork_bind_Params) Port() ip.TcpPort {
	p, _ := s.Struct.Ptr(1)
	return ip.TcpPort{Client: p.Interface().Client()}
}

func (s LocalNetwork_bind_Params) HasPort() bool {
	return s.Struct.HasPtr(1)
}

func (s LocalNetwork_bind_Params) SetPort(v ip.TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// LocalNetwork_bind_Params_List is a list of LocalNetwork_bind_Params.
type LocalNetwork_bind_Params_List struct{ capnp.List }

// NewLocalNetwork_bind_Params creates a new list of LocalNetwork_bind_Params.
func NewLocalNetwork_bind_Params_List(s *capnp.Segment, sz int32) (LocalNetwork_bind_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LocalNetwork_bind_Params_List{l}, err
}

func (s LocalNetwork_bind_Params_List) At(i int) LocalNetwork_bind_Params {
	return LocalNetwork_bind_Params{s.List.Struct(i)}
}

func (s LocalNetwork_bind_Params_List) Set(i int, v LocalNetwork_bind_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LocalNetwork_bind_Params_List) String() string {
	str, _ := text.MarshalList(0xab6095ec0734f95a, s.List)
	return str
}

// LocalNetwork_bind_Params_Future is a wrapper for a LocalNetwork_bind_Params promised by a client call.
type LocalNetwork_bind_Params_Future struct{ *capnp.Future }

func (p LocalNetwork_bind_Params_Future) Struct() (LocalNetwork_bind_Params, error) {
	s, err := p.Future.Struct()
	return LocalNetwork_bind_Params{s}, err
}

func (p LocalNetwork_bind_Params_Future) Info() PortInfo_Future {
	return PortInfo_Future{Future: p.Future.Field(0, nil)}
}

func (p LocalNetwork_bind_Params_Future) Port() ip.TcpPort {
	return ip.TcpPort{Client: p.Future.Field(1, nil).Client()}
}

type LocalNetwork_bind_Results struct{ capnp.Struct }

// LocalNetwork_bind_Results_TypeID is the unique identifier for the type LocalNetwork_bind_Results.
const LocalNetwork_bind_Results_TypeID = 0x98f83c744f0d936b

func NewLocalNetwork_bind_Results(s *capnp.Segment) (LocalNetwork_bind_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_bind_Results{st}, err
}

func NewRootLocalNetwork_bind_Results(s *capnp.Segment) (LocalNetwork_bind_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_bind_Results{st}, err
}

func ReadRootLocalNetwork_bind_Results(msg *capnp.Message) (LocalNetwork_bind_Results, error) {
	root, err := msg.Root()
	return LocalNetwork_bind_Results{root.Struct()}, err
}

func (s LocalNetwork_bind_Results) String() string {
	str, _ := text.Marshal(0x98f83c744f0d936b, s.Struct)
	return str
}

func (s LocalNetwork_bind_Results) Handle() util.Handle {
	p, _ := s.Struct.Ptr(0)
	return util.Handle{Client: p.Interface().Client()}
}

func (s LocalNetwork_bind_Results) HasHandle() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalNetwork_bind_Results) SetHandle(v util.Handle) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// LocalNetwork_bind_Results_List is a list of LocalNetwork_bind_Results.
type LocalNetwork_bind_Results_List struct{ capnp.List }

// NewLocalNetwork_bind_Results creates a new list of LocalNetwork_bind_Results.
func NewLocalNetwork_bind_Results_List(s *capnp.Segment, sz int32) (LocalNetwork_bind_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return LocalNetwork_bind_Results_List{l}, err
}

func (s LocalNetwork_bind_Results_List) At(i int) LocalNetwork_bind_Results {
	return LocalNetwork_bind_Results{s.List.Struct(i)}
}

func (s LocalNetwork_bind_Results_List) Set(i int, v LocalNetwork_bind_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LocalNetwork_bind_Results_List) String() string {
	str, _ := text.MarshalList(0x98f83c744f0d936b, s.List)
	return str
}

// LocalNetwork_bind_Results_Future is a wrapper for a LocalNetwork_bind_Results promised by a client call.
type LocalNetwork_bind_Results_Future struct{ *capnp.Future }

func (p LocalNetwork_bind_Results_Future) Struct() (LocalNetwork_bind_Results, error) {
	s, err := p.Future.Struct()
	return LocalNetwork_bind_Results{s}, err
}

func (p LocalNetwork_bind_Results_Future) Handle() util.Handle {
	return util.Handle{Client: p.Future.Field(0, nil).Client()}
}

type LocalNetwork_resolve_Params struct{ capnp.Struct }

// LocalNetwork_resolve_Params_TypeID is the unique identifier for the type LocalNetwork_resolve_Params.
const LocalNetwork_resolve_Params_TypeID = 0xe4bcbe0553557c69

func NewLocalNetwork_resolve_Params(s *capnp.Segment) (LocalNetwork_resolve_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_resolve_Params{st}, err
}

func NewRootLocalNetwork_resolve_Params(s *capnp.Segment) (LocalNetwork_resolve_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_resolve_Params{st}, err
}

func ReadRootLocalNetwork_resolve_Params(msg *capnp.Message) (LocalNetwork_resolve_Params, error) {
	root, err := msg.Root()
	return LocalNetwork_resolve_Params{root.Struct()}, err
}

func (s LocalNetwork_resolve_Params) String() string {
	str, _ := text.Marshal(0xe4bcbe0553557c69, s.Struct)
	return str
}

func (s LocalNetwork_resolve_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s LocalNetwork_resolve_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalNetwork_resolve_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s LocalNetwork_resolve_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// LocalNetwork_resolve_Params_List is a list of LocalNetwork_resolve_Params.
type LocalNetwork_resolve_Params_List struct{ capnp.List }

// NewLocalNetwork_resolve_Params creates a new list of LocalNetwork_resolve_Params.
func NewLocalNetwork_resolve_Params_List(s *capnp.Segment, sz int32) (LocalNetwork_resolve_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return LocalNetwork_resolve_Params_List{l}, err
}

func (s LocalNetwork_resolve_Params_List) At(i int) LocalNetwork_resolve_Params {
	return LocalNetwork_resolve_Params{s.List.Struct(i)}
}

func (s LocalNetwork_resolve_Params_List) Set(i int, v LocalNetwork_resolve_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LocalNetwork_resolve_Params_List) String() string {
	str, _ := text.MarshalList(0xe4bcbe0553557c69, s.List)
	return str
}

// LocalNetwork_resolve_Params_Future is a wrapper for a LocalNetwork_resolve_Params promised by a client call.
type LocalNetwork_resolve_Params_Future struct{ *capnp.Future }

func (p LocalNetwork_resolve_Params_Future) Struct() (LocalNetwork_resolve_Params, error) {
	s, err := p.Future.Struct()
	return LocalNetwork_resolve_Params{s}, err
}

type LocalNetwork_resolve_Results struct{ capnp.Struct }

// LocalNetwork_resolve_Results_TypeID is the unique identifier for the type LocalNetwork_resolve_Results.
const LocalNetwork_resolve_Results_TypeID = 0xe6dd17de47410e70

func NewLocalNetwork_resolve_Results(s *capnp.Segment) (LocalNetwork_resolve_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_resolve_Results{st}, err
}

func NewRootLocalNetwork_resolve_Results(s *capnp.Segment) (LocalNetwork_resolve_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalNetwork_resolve_Results{st}, err
}

func ReadRootLocalNetwork_resolve_Results(msg *capnp.Message) (LocalNetwork_resolve_Results, error) {
	root, err := msg.Root()
	return LocalNetwork_resolve_Results{root.Struct()}, err
}

func (s LocalNetwork_resolve_Results) String() string {
	str, _ := text.Marshal(0xe6dd17de47410e70, s.Struct)
	return str
}

func (s LocalNetwork_resolve_Results) Port() ip.TcpPort {
	p, _ := s.Struct.Ptr(0)
	return ip.TcpPort{Client: p.Interface().Client()}
}

func (s LocalNetwork_resolve_Results) HasPort() bool {
	return s.Struct.HasPtr(0)
}

func (s LocalNetwork_resolve_Results) SetPort(v ip.TcpPort) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// LocalNetwork_resolve_Results_List is a list of LocalNetwork_resolve_Results.
type LocalNetwork_resolve_Results_List struct{ capnp.List }

// NewLocalNetwork_resolve_Results creates a new list of LocalNetwork_resolve_Results.
func NewLocalNetwork_resolve_Results_List(s *capnp.Segment, sz int32) (LocalNetwork_resolve_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return LocalNetwork_resolve_Results_List{l}, err
}

func (s LocalNetwork_resolve_Results_List) At(i int) LocalNetwork_resolve_Results {
	return LocalNetwork_resolve_Results{s.List.Struct(i)}
}

func (s LocalNetwork_resolve_Results_List) Set(i int, v LocalNetwork_resolve_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LocalNetwork_resolve_Results_List) String() string {
	str, _ := text.MarshalList(0xe6dd17de47410e70, s.List)
	return str
}

// LocalNetwork_resolve_Results_Future is a wrapper for a LocalNetwork_resolve_Results promised by a client call.
type LocalNetwork_resolve_Results_Future struct{ *capnp.Future }

func (p LocalNetwork_resolve_Results_Future) Struct() (LocalNetwork_resolve_Results, error) {
	s, err := p.Future.Struct()
	return LocalNetwork_resolve_Results{s}, err
}

func (p LocalNetwork_resolve_Results_Future) Port() ip.TcpPort {
	return ip.TcpPort{Client: p.Future.Field(0, nil).Client()}
}

const schema_e24f05f123e395af = "x\xda\x8c\x91\xcfk\x13Q\x1c\xc4gv\xf75\x11\x92" +
	"n\x1f[\x90x\x111\x05\x8dX\xda\xdaS\x11\x12s" +
	"\x11E\xccnEPA\xc8\x9an1t\xbb\xbbnV" +
	"+(\x88'OEA\x02\xbd\xf8\x0f\xf8\x13\xc5\x9e\xfc" +
	"\x81\x07O^\xfa\x17(\xa2\"\"\x0a\x0a\"zZy" +
	"\xa1MBE\xdb\xdb\xe3\xf1a\xe6;3c/X\xd1" +
	"\xc6Em\x0b\xe0\xf8b \x9d\xbb\x99\xaf%\xfb\x7f-" +
	"A\x16\x08\x08f\x80}\x8b\xc6\x04A\xabm\x94\xc1\xf4" +
	"\xd4\xef\xc9\xcc\x97v\xfd\xce*\xa0)`\xd9()\xe0" +
	"\x99\xb1\x00\xa6{N\xafL\x9cxyc\x052\xa7\xa7" +
	"\x0f\xda\xefw~\x17\xb5w\x00\xad\x82xe\x8d\x88\x0c" +
	"`\xed\x10\xd7\xacs\xea\x956/\x1f?&\x9e?\xfd" +
	"\xd0owRT\x95\x9a+\x94]4x\xe0\xe0\x9b\xad" +
	"\xaf?\xf6\x03W\xc5a\x05,v\x80'\x97n]\xbf" +
	"\xdf\xf8\xfa\x132\xc7\x9e]\x07\xb4\xee\x89\xdb\xd6r\xc7" +
	"\xf1\xa1(\xe3S\x1a\xc5a\x12\x8e6\\=\x0a\xa2\xa9" +
	"#a\xc3\xf5\x8fz\xc9B\x18\xcf\x8d\x9ei\x063\xc5" +
	"io{\xeb\xbc\x9f\xb4\x1cC7\x00\x83\x80\xccO\x01" +
	"NV\xa73\xac\xb1|\xd6\x0df|\x8f2}[\xad" +
	"\xd7\xef\x16\x7f,\x01\xa4TG\xfe_\xd7v\xcd\xd8\x9d" +
	"o9\xd9\xae\xec\xee\x12\xe0\x14u:c\x1a%9L" +
	"\xf5\xb9W}\xee\xd2\xe9Lj4\x9b\xc1l\xc8\xa1^" +
	":\x90C\xa0\x19\x85qB\x99>\x1e\xb8\xf8m\xdb\xe0" +
	"\xa3\xcf\xeb\x0f\xd0\xd6\x1f\x00\xd8\xa4\x93\xd5\x05\xd0]\x8e" +
	"k\x1b\xcb\xf1\x1249\x92!\xbb;p\xadoY\xa8" +
	"B\x93\xf9\x8c\xa9\x12Tx%\xf6Z\xa1\x7f\xc1\xab\xd0" +
	"f\xcf\xce\xf8+\xef*V\xb4]\x95\x18\xfdM\x96z" +
	"M\x9a\x81;\xef1\x07\x8d9lFm\xda\xeb\xec\x82" +
	"\x7f\xeamP\x0b\x95\xb2\x1d\xc6\x89y(\x98\x0dU#" +
	"\x9b\xb8\xebO\x00\x00\x00\xff\xffg\x8a\xd3\x17"

func init() {
	schemas.Register(schema_e24f05f123e395af,
		0x98f83c744f0d936b,
		0xab6095ec0734f95a,
		0xcf90c45832cf5d2b,
		0xe4bcbe0553557c69,
		0xe6dd17de47410e70,
		0xf6ed63ae8f9d7bbb)
}
